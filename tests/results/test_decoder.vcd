$date
	Fri Aug 22 02:13:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_decoder $end
$var wire 32 ! unextended_data [31:0] $end
$var wire 3 " sx_op [2:0] $end
$var wire 5 # rs2 [4:0] $end
$var wire 5 $ rs1 [4:0] $end
$var wire 1 % reg_write $end
$var wire 5 & rd [4:0] $end
$var wire 7 ' opcode [6:0] $end
$var wire 1 ( mem_write $end
$var wire 1 ) mem_read $end
$var wire 7 * f7 [6:0] $end
$var wire 3 + f3 [2:0] $end
$var wire 3 , alu_op [2:0] $end
$var parameter 32 - DATA_WIDTH $end
$var reg 32 . instruction [31:0] $end
$var reg 1 / test_failed $end
$scope module dut $end
$var wire 32 0 instruction [31:0] $end
$var wire 7 1 inst_op [6:0] $end
$var parameter 32 2 DATA_WIDTH $end
$var reg 3 3 alu_op [2:0] $end
$var reg 3 4 f3 [2:0] $end
$var reg 7 5 f7 [6:0] $end
$var reg 1 ) mem_read $end
$var reg 1 ( mem_write $end
$var reg 7 6 opcode [6:0] $end
$var reg 5 7 rd [4:0] $end
$var reg 1 % reg_write $end
$var reg 5 8 rs1 [4:0] $end
$var reg 5 9 rs2 [4:0] $end
$var reg 3 : sx_op [2:0] $end
$var reg 32 ; unextended_data [31:0] $end
$upscope $end
$scope task finish $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 2
b100000 -
$end
#0
$dumpvars
b10 ;
b0 :
b0 9
b1010 8
b101 7
b11 6
b0 5
b10 4
b0 3
b11 1
b1001010010001010000011 0
x/
b1001010010001010000011 .
b0 ,
b10 +
b0 *
1)
0(
b11 '
b101 &
1%
b1010 $
b0 #
b0 "
b10 !
$end
#1000
b11 !
b11 ;
b1 +
b1 4
b1100 &
b1100 7
b111 $
b111 8
1)
1%
b0 "
b0 :
b0 ,
b0 3
b1100111001011000000011 .
b1100111001011000000011 0
#2000
b111111110111 !
b111111110111 ;
b0 +
b0 4
b11 &
b11 7
b1110 $
b1110 8
1)
1%
b0 "
b0 :
b0 ,
b0 3
b11111111011101110000000110000011 .
b11111111011101110000000110000011 0
#3000
b100 +
b100 4
b1100 !
b1100 ;
b1001 &
b1001 7
b10 $
b10 8
1)
1%
b0 "
b0 :
b0 ,
b0 3
b110000010100010010000011 .
b110000010100010010000011 0
#4000
b10101 !
b10101 ;
b101 +
b101 4
b10001 &
b10001 7
b110 $
b110 8
1)
1%
b0 "
b0 :
b0 ,
b0 3
b1010100110101100010000011 .
b1010100110101100010000011 0
#5000
1(
b10000 #
b10000 9
b100011 '
b100011 6
b1100 !
b1100 ;
b10 +
b10 4
b0 &
b0 7
b1000 $
b1000 8
0)
0%
b0 "
b0 :
b0 ,
b0 3
b100011 1
b1000001000010011000100011 .
b1000001000010011000100011 0
#6000
b111111100010 !
b111111100010 ;
b1 +
b1 4
b1010 #
b1010 9
b1111 $
b1111 8
1(
b0 "
b0 :
b0 ,
b0 3
b11111110101001111001000100100011 .
b11111110101001111001000100100011 0
#7000
b110010 !
b110010 ;
b0 +
b0 4
b10110 #
b10110 9
b10001 $
b10001 8
1(
b0 "
b0 :
b0 ,
b0 3
b11011010001000100100100011 .
b11011010001000100100100011 0
#8000
1%
b1 &
b1 7
b1101111 '
b1101111 6
b1000000000000000000 !
b1000000000000000000 ;
b0 #
b0 9
b0 $
b0 8
0(
b110 "
b110 :
b0 ,
b0 3
b1101111 1
b1000000000000011101111 .
b1000000000000011101111 0
#9000
b1001 $
b1001 8
b1100111 '
b1100111 6
b1 !
b1 ;
b11 &
b11 7
1%
b0 "
b0 :
b0 ,
b0 3
b1100111 1
b101001000000111100111 .
b101001000000111100111 0
#10000
b1010 #
b1010 9
b1100011 '
b1100011 6
b100 !
b100 ;
b0 &
b0 7
b101 $
b101 8
0%
b0 "
b0 :
b1 ,
b1 3
b1100011 1
b101000101000010001100011 .
b101000101000010001100011 0
#11000
b1 +
b1 4
b111111111110 !
b111111111110 ;
b111 #
b111 9
b1100 $
b1100 8
b0 "
b0 :
b1 ,
b1 3
b11111110011101100001111011100011 .
b11111110011101100001111011100011 0
#12000
b1111111 '
b1111111 6
b0 !
b0 ;
b0 +
b0 4
b0 #
b0 9
b0 $
b0 8
b111 "
b111 :
b111 ,
b111 3
b1111111 1
b11111111111111111111111111111111 .
b11111111111111111111111111111111 0
#13000
b0 '
b0 6
b0 1
b0 .
b0 0
#14000
